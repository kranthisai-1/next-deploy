name: Manual Tag Deployment

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Select tag to deploy"
        required: true
        type: choice
        # Auto-populate tags using GitHub API (runs on workflow call)
        default: |
          ${{ 
            github.event.inputs.version_tag || 
            `TAGS=$(git ls-remote --tags origin | awk -F/ '{print $3}' | sort -Vr | head -5); 
            echo "${TAGS}" | jq -R -s -c 'split("\n") | map(select(. != ""))' 
          }}
      deployment_environment:
        description: "Target environment"
        required: true
        type: choice
        options: [staging, production]
      deployment_message:
        description: "Deployment reason"
        required: false
        default: "Manual deployment"
      notify_slack:
        description: "Send Slack notification?"
        type: boolean
        default: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.deployment_environment }}
    
    steps:
      - name: Checkout repository (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: true

      - name: Fetch all tags
        run: |
          git fetch --tags --force
          echo "Available tags:"
          git tag --list

      - name: Validate selected tag
        run: |
          if ! git show-ref --tags "refs/tags/${{ inputs.version_tag }}" >/dev/null; then
            echo "::error::Tag ${{ inputs.version_tag }} does not exist in local repository!"
            echo "Available tags:"
            git tag --list
            exit 1
          fi
          echo "âœ… Validated local tag: ${{ inputs.version_tag }}"

      - name: Full checkout of selected tag
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ inputs.version_tag }}
          fetch-depth: 0

      - name: Verify tag content
        run: |
          echo "Commit details for tag ${{ inputs.version_tag }}:"
          git log -1 --oneline
          echo "Tag verification passed"

      - name: Trigger Amplify deployment
        env:
          WEBHOOK_URL: ${{ 
            inputs.deployment_environment == 'production' && 
            secrets.AMPLIFY_PROD_WEBHOOK || 
            secrets.AMPLIFY_STAGING_WEBHOOK 
          }}
        run: |
          curl -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d '{
              "clientMetadata": {
                "version_tag": "${{ inputs.version_tag }}",
                "commit_hash": "$(git rev-parse HEAD)",
                "deployment_reason": "${{ inputs.deployment_message }}"
              }
            }'

      - name: Slack notification
        if: ${{ inputs.notify_slack }}
        uses: slackapi/slack-github-action@v1
        with:
          channel: deployments
          message: |
            ðŸš€ Deployment triggered
            â€¢ Environment: ${{ inputs.deployment_environment }}
            â€¢ Version: ${{ inputs.version_tag }}
            â€¢ Commit: $(git log -1 --pretty=format:"%h")
            â€¢ By: @${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}