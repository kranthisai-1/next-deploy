name: Manual Tag Deployment

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Select tag to deploy"
        required: true
        type: string
      deployment_environment:
        description: "Target environment"
        required: true
        type: choice
        options: [staging, production]
        default: "staging"
      deployment_message:
        description: "Deployment reason"
        required: false
        default: "Manual deployment"
      notify_slack:
        description: "Send Slack notification?"
        type: boolean
        default: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.deployment_environment }}
    steps:
      - name: Get latest tags
        id: get-tags
        run: |
          TAGS=$(git ls-remote --tags origin | awk -F/ '{print $3}' | sort -Vr | head -5 | jq -R -s -c 'split("\n") | map(select(. != ""))')
          echo "latest_tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/tags/${{ github.event.inputs.version_tag }}

      - name: Validate tag
        run: |
          if ! git show-ref --tags "refs/tags/${{ github.event.inputs.version_tag }}"; then
            echo "::error::Tag ${{ github.event.inputs.version_tag }} not found!"
            exit 1
          fi

      - name: Trigger Amplify
        run: |
          if [[ "${{ github.event.inputs.deployment_environment }}" == "production" ]]; then
            WEBHOOK="https://webhooks.amplify.us-east-1.amazonaws.com/prod/webhooks?id=da0ac255-2976-48ec-a99b-be6397caf298&token=GD0zBA1bAAFOlD87jT3KMJik8ylM0J5Nsex3OUNIOg"
          else
            WEBHOOK="https://webhooks.amplify.us-east-1.amazonaws.com/prod/webhooks?id=491b16b6-4c4b-4690-ba80-3e4dcf40a4d4&token=HoP06RMo7z7VPwCznlDYrfSHdqBcPTCnMWgEybr9A"
          fi

          echo "Triggering deployment via webhook: $WEBHOOK"

          curl -X POST "$WEBHOOK" \
            -H "Content-Type: application/json" \
            -d '{
              "clientMetadata": {
                "version_tag": "${{ github.event.inputs.version_tag }}",
                "commit": "'"$(git rev-parse HEAD)"'"
              }
            }'
