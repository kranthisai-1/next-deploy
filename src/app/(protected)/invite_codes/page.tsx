/* eslint-disable react-hooks/exhaustive-deps */
'use client';

import { useState, useEffect } from 'react';
import Heading from '@/components/Heading';
import Table, { Column } from '@/components/Table';
import PaginationComponent from '@/components/PaginationComponent';
import { PaginationQueryParams } from '@/types/PaginationQueryParams';
import toast from 'react-hot-toast';
import { InviteCode, InviteCodesPaginatedResponse } from './type';
import { Spinner } from '@/components/Spinner';
import { formatDate } from '@/utils/utils';
import Image from 'next/image';
import { mapTableData } from '@/utils/mapTableData';
import { useRouter, useSearchParams } from 'next/navigation';
import InviteCodeModal from '@/components/InviteCodeModal';
import { useApiInstance } from '@/hooks/useApiInstance';
import { isFailureResponse } from '@/utils/isFailureResponse';
import { handleResponse } from '@/utils/handleResponse';
import { useFilters } from '@/providers/FiltersProvider';

export default function InviteCodes() {
  const router = useRouter();
  const api = useApiInstance();
  const searchParams = useSearchParams();
  const pageFromURL = parseInt(searchParams.get('page') || '1');
  const [paginationParams, setPaginationParams] =
    useState<PaginationQueryParams>({
      page: pageFromURL,
      limit: 10,
    });
  const [inviteCodesData, setInviteCodesData] =
    useState<InviteCodesPaginatedResponse>();
  const [isLoading, setIsLoading] = useState(false);
  const [isInviteCodeModalOpen, setIsInviteCodeModalOpen] = useState(false);
  const { resetAllFilters } = useFilters();

  useEffect(() => {
    resetAllFilters();
  }, []);

  useEffect(() => {
    fetchInviteCodes();
  }, [paginationParams]);

  const fetchInviteCodes = async () => {
    setIsLoading(true);
    setIsLoading(true);
    try {
      const response: InviteCodesPaginatedResponse = await handleResponse(
        api.authenticatedGet(`/internal/invites`, {
          ...paginationParams,
        }),
      );
      setInviteCodesData(response);
    } catch (error) {
      if (isFailureResponse(error)) {
        toast.error(error.message || 'Failed to fetch invite codes');
      } else {
        toast.error('Something went wrong');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleClipboardClick = (value: string) => {
    navigator.clipboard
      .writeText(value)
      .then(() => {
        toast.success('Copied to clipboard!', {
          position: 'top-right',
        });
      })
      .catch(() => {
        toast.error('Failed to copy!', {
          position: 'top-right',
        });
      });
  };

  const columns: Column[] = [
    {
      label: 'Code',
      field: 'code',
      render: (code: string) => (
        <span className="flex items-center">
          {code}
          <span className="clipboard">
            <Image
              src="/clipboard.svg"
              alt="Copy to clipboard"
              width={14}
              height={18}
              className="cursor-pointer ml-4"
              onClick={e => {
                e.stopPropagation();
                handleClipboardClick(code);
              }}
            />
          </span>
        </span>
      ),
    },
    { label: 'Expires At', field: 'expires_at', formatter: formatDate },
    {
      label: 'Usage',
      field: ['number_of_times_used', 'maximum_use_limit'],
      formatter: values => values.join('/'),
    },
    { label: 'Generated By', field: 'generated_by_user_uuid' },
  ];

  const tableData = inviteCodesData?.data
    ? mapTableData(inviteCodesData.data, columns)
    : [];

  const handleRowClick = (rowData: Record<string, InviteCode>) => {
    if (rowData) {
      router.push(`/invite_codes/${rowData.code}`);
    }
  };

  const inviteCodeOptions = [
    {
      label: 'Create',
      onClick: () => setIsInviteCodeModalOpen(true),
    },
  ];

  return (
    <div className="min-h-[100%] bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 px-6">
      <Heading
        headingText="Invite Codes"
        showBackButton={false}
        buttons={inviteCodeOptions}
        className="px-0 pt-0"
      />

      <div className="space-y-3 pb-2 mt-2">
        {/* Search and Filters */}

        {/* InviteCodes Table */}
        {inviteCodesData && (
          <Table
            data={tableData!}
            columns={columns}
            onRowClick={handleRowClick}
          />
        )}

        {/* Pagination Component */}
        {inviteCodesData && inviteCodesData.total_page !== 0 && (
          <PaginationComponent
            paginationParams={paginationParams}
            setPaginationParams={setPaginationParams}
            successResponse={inviteCodesData}
            isLoading={isLoading}
          />
        )}

        {inviteCodesData && (
          <InviteCodeModal
            onSuccess={fetchInviteCodes}
            isOpen={isInviteCodeModalOpen}
            onClose={() => setIsInviteCodeModalOpen(false)}
          />
        )}

        {isLoading && !inviteCodesData && <Spinner className="mt-20" />}
      </div>
    </div>
  );
}
